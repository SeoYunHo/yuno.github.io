

Seoul.js에 다녀와서
---
포스팅이 조금 늦었지만, 지난 8월 18일 자바스크립트 컨퍼런스인 Seoul.js에 갔었습니다.

그곳에서 많은 것을 듣게 되었고, 이것들을 여러분들께 공유하고 싶어서 글을 올립니다!!

Seoul.js의 강의 목차는 다음과 같습니다.
1. ES2017 소개
2. 일렉트론에서 자바스크립트 소스 코드 보호하기(Protecting Javascript Source Code in Electron)
3. 문서화에 날개를 달아주는 Flybook CLI-Static Web Site Generator
4. 새로운 자바스크립트 개발 도구의 시대(Zero-Configuration Tool) - Jimmy Moon

## ES2017 소개 
---
이번에 나온 ES2017에서의 내용을 설명해 주셨습니다.

업데이트는 minor 3개와 major 2개가 되었는데요

그전에 여러분들은 왜 ECMAScript라고 부르는지 아시나요??
```
ECMA: 정보와 통신 시스템을 위한 국제적이면서도 회원국 기반의 비영리 표준화 기구
javascript는 상표라고 할 수 있으므로 ECMA에서 따와서 ECMAScript라고 지음
TC39(Technical Committee 39)
```

다시 본론으로 돌아가서 ES2017에 대해서 설명해드리겠습니다.
### minor
---

1. Object.values & Object.entries (Friends of Object.keys())
        Object.values:만약 숫자가 key값이라면 키값으로 sort
2. String padding
        String.prototype.padStart(maxLength[, fillString]) 
        String.prototype.padEnd(maxLength[, fillString])
3. Object.getOwnPropertyDescriptors(Friends of Object.getOwnPropertyDescriptors(obj, prop)) ## Descriptor??
    Trailing commas in function parameter lists and calls
    변경점을 정확히 체크??? 함수 호출할 때 실수 줄이기??

### major
---
    
1. Async functions
        콜백텔??문제 -> Promise ->Async(어싱크) promise 개선
        async/await -> 프로미스를 좀더 동기적으로 사용
        Promise.all()
        Promise VS async -> simple & clean & Error Handling & conditional statement, async functions without 
2. Shared memory and atiomics 
        메모리를 보내는 방법이 여러개 -> SharedArrayBuffer (ArrayBuffer 비슷 but 다른 worker들과 공유 불가능) 
        Shared memory를 사용해서 계산할 때, atomic이 잘못된 계산을 미연에 방지
        const sab = new SharedArrayBuffer(1024)
        worker.postMessage(sab);

        Atomic.add(shareInt32Array, 0, 1);

## 일렉트론에서 자바스크립트 소스 코드 보호하기(Protecting Javascript Source Code in Electron) Mark Lee, studi XID 2woongjae@gmail.com
---

    일레트론 웹기술로 데스크탑 어플리케이션을 개발할 수 있는 오픈소스 프레임워크  
        메인프로세스와 랜터러 프로세스
            메인은 node.js라고 생각
            랜더러는 각각 크롬브라우저
            메인은 하나 랜더러는 창마다
    protoPie-디자이너를 위한 인터렉션 프로토타이핑 도구 현재 개발중 소스보호를 위해서 enclosejs,pkg 사용 /자동업데이트 서버 zeit/하젤??..
    일렉트론은 보완이 취약
        필요한 경우 (로그인 토큰 로그인 정보 로컬 저장, 서버와의 접속 방식, 기타 중요하다고 생각하는 비즈니스 로직) 필요하지 않은 경우(인증을 동적으로 받아 처리하는 경우 브라우저 처럼)
    asar 처리
        asar pack
        asar extract
        사실상 보안의 의미 없음
    uglify
        자바스크립트라면 기본
        beautify(이런것들은 보안 x)
    enclosejs
        use case 소스 보호
            노드프로젝트가 하나의 바이너리파일로 변환 -> enclosejs 서비스 중단..
    zeit/pkg(오픈소스)
        Node.js 프로젝트를 패키징 -> Node.js가 설치되지 않은 장치에서도 실행할수있는 실행파일을 만들어주는 커맨드라인 인터페이스
        process의 분리와 node-ipc와 통신(node-ipc???..)
        코드사이닝??
        puppet..?
        TypeScript??...
        .ts..?
        단점
            코드가 많아진다 코드관리 어려움 -> 타입스크립트
            용량도 커진다
            엔진 성능 이슈 https://github.com/zeit/pkg/issues/74
            ipc 성능 이슈 컨텍스트보다는 느리지만 실제로는 브라우저에서의 성능이 더관건이다.
        vm api


문서화에 날개를 달아주는 Flybook CLI-Static Web Site Generator 
발표자 님께서 개발중이신 Flybook에 대해서 설명해 주셨습니다.    
    flybook --save-D
    gh-pages -D


새로운 자바스크립트 개발 도구의 시대(Zero-Configuration Tool) - Jimmy Moon
    큰 어플리케이션을 만들게 되면서 등장
    boilerplates, starter-kits
    lint formatting
    